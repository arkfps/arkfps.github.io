<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:webfeeds="http://webfeeds.org/rss/1.0"><link href="https://thehermeticvault.com/news/3" rel="self" type="application/atom+xml"/><link href="https://thehermeticvault.com/" rel="alternate" type="text/html"/><id>urn:uuid:31ee1aa6-10b9-4fd9-b913-cdc50a76d9d8</id><title>The Hermetic Vault</title><subtitle>A miscellanea of software development techniques: C++, generic programming, design patterns, CI, and more.</subtitle><category term="Software Development" label="Software Development"/><author><name>Pavel Frolov</name></author><updated>2019-10-23T01:07:02+03:00</updated><rights>© 2019 TheHermeticVault.com</rights><icon>https://thehermeticvault.com/icn/feed/icon.2.svg</icon><logo>https://thehermeticvault.com/icn/feed/logo.2.svg</logo><webfeeds:icon>https://thehermeticvault.com/icn/feed/icon.2.svg</webfeeds:icon><webfeeds:logo>https://thehermeticvault.com/icn/feed/logo.2.svg</webfeeds:logo><webfeeds:accentColor>ac4142</webfeeds:accentColor><entry><link href="https://thehermeticvault.com/software-development/making-boost-signals2-more-oop-friendly" rel="alternate" type="text/html" title="Making Boost.Signals2 More OOP‐Friendly"/><id>urn:uuid:b5e5a495-748d-41bd-b31f-5b06229fdf09</id><title>Making Boost.Signals2 More OOP‐Friendly</title><category term="Software Development" label="Software Development"/><category term="Boost" label="Boost"/><category term="C++" label="C++"/><category term="Design Patterns" label="Design Patterns"/><category term="Generic Programming" label="Generic Programming"/><category term="OOP" label="OOP"/><author><name>Pavel Frolov</name></author><published>2015-04-17T00:00:00+03:00</published><updated>2019-10-19T21:09:00+03:00</updated><summary>Unfortunately, unlike other mainstream languages, the C++ standard library doesn’t provide out of the box observer implementation. This article suggests an observable mixin based on Boost.Signals2 which makes it easy to build an observer.</summary><media:thumbnail url="https://thehermeticvault.com/img/pages/el-caracol-observatory.jpg" width="1920" height="936"/></entry><entry><link href="https://thehermeticvault.com/software-development/resource-management-with-explicit-template-specialisations" rel="alternate" type="text/html" title="Resource Management with Explicit Template Specialisations"/><id>urn:uuid:cc8a2d84-a51a-4de8-867e-05ffec616448</id><title>Resource Management with Explicit Template Specialisations</title><category term="Software Development" label="Software Development"/><category term="C++" label="C++"/><category term="Generic Programming" label="Generic Programming"/><category term="Windows API" label="Windows API"/><author><name>Pavel Frolov</name></author><published>2015-04-10T00:00:00+03:00</published><updated>2019-09-21T23:47:15+03:00</updated><summary>Here’s my article from the April 2015 issue of Overload journal. It shows how to build a convinient RAII wrapper with the help of interesting static polymorphism technique based on explicit template specialisation.</summary><media:thumbnail url="https://thehermeticvault.com/img/pages/overload-126.png" width="1532" height="1080"/></entry><entry><link href="https://thehermeticvault.com/software-development/providing-explicit-specialisations-for-non-template-members-of-class-template" rel="alternate" type="text/html" title="Providing Explicit Specialisations for Non‐Template Members of Class Template"/><id>urn:uuid:09e7137d-33df-4c82-bfde-574f3289bea6</id><title>Providing Explicit Specialisations for Non‐Template Members of Class Template</title><category term="Software Development" label="Software Development"/><category term="C++" label="C++"/><category term="Generic Programming" label="Generic Programming"/><author><name>Pavel Frolov</name></author><published>2015-01-17T00:00:00+03:00</published><updated>2019-10-20T23:34:05+03:00</updated><summary>It is a well-known fact that you can provide explicit specialisations for function templates and class templates. But it was a total surprise to me that you can define explicit specialisations for non‐template members of class template without specialising the class template itself!</summary><media:thumbnail url="https://thehermeticvault.com/img/pages/goethe-schiller-monument.jpg" width="1440" height="1080"/></entry><entry><link href="https://thehermeticvault.com/software-development/using-coverity-scan-with-appveyor" rel="alternate" type="text/html" title="Using Coverity Scan with AppVeyor"/><id>urn:uuid:1a7a870e-0b45-4187-bf77-6ea25b91dcba</id><title>Using Coverity Scan with AppVeyor</title><category term="Software Development" label="Software Development"/><category term="CI" label="CI"/><category term=".NET" label=".NET"/><category term="PowerShell" label="PowerShell"/><category term="Static Analysis" label="Static Analysis"/><author><name>Pavel Frolov</name></author><published>2015-01-07T00:00:00+03:00</published><updated>2019-10-09T13:42:30+03:00</updated><summary>Unlike Travis CI, AppVeyor currently lacks out of the box integration with Coverity Scan. In this article I’ll show you how to enable Coverity Scan code analysis for your project by injecting custom PowerShell scripts into AppVeyor build process.</summary><media:thumbnail url="https://thehermeticvault.com/img/pages/codex-hammurabi.jpg" width="1620" height="1080"/></entry></feed>
