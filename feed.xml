<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"  xmlns:webfeeds="http://webfeeds.org/rss/1.0"><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://thehermeticvault.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thehermeticvault.com/" rel="alternate" type="text/html" /><updated>2019-09-20T00:11:06+03:00</updated><id>https://thehermeticvault.com/feed.xml</id><title type="html">The Hermetic Vault</title><subtitle>A miscellanea of software development techniques: C++, generic programming, design patterns, CI, and more.</subtitle><author><name>Pavel Frolov</name></author><webfeeds:cover image="https://thehermeticvault.com/img/pages/logo3.png"/>
<webfeeds:icon>https://thehermeticvault.com/safari-pinned-tab.svg</webfeeds:icon>
<webfeeds:logo>https://thehermeticvault.com/safari-pinned-tab.svg</webfeeds:logo>
<webfeeds:accentColor>ac4142</webfeeds:accentColor>
<entry><title type="html">Making Boost.Signals2 More OOP‐Friendly</title><link href="https://thehermeticvault.com/software-development/making-boost-signals2-more-oop-friendly" rel="alternate" type="text/html" title="Making Boost.Signals2 More OOP‐Friendly" /><published>2015-04-17T00:00:00+03:00</published><updated>2015-04-17T00:00:00+03:00</updated><id>https://thehermeticvault.com/software-development/making-boost-signals2-more-oop-friendly</id><author><name>Pavel Frolov</name></author><category term="software-development" /><category term="Boost" /><category term="C++" /><category term="Design Patterns" /><category term="Generic Programming" /><category term="OOP" /><summary type="html">The observer design pattern is by far the most popular and widely known among behavioural design patterns. Unfortunately, unlike other mainstream languages out there, the C++ standard library doesn’t provide out of the box observer implementation. This article suggests an observable mixin based on Boost.Signals2 which makes it easy to build an observer.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://thehermeticvault.com/img/pages/el-caracol-observatory.jpg" /></entry><entry><title type="html">Resource Management with Explicit Template Specialisations</title><link href="https://thehermeticvault.com/software-development/resource-management-with-explicit-template-specialisations" rel="alternate" type="text/html" title="Resource Management with Explicit Template Specialisations" /><published>2015-04-10T00:00:00+03:00</published><updated>2015-04-10T00:00:00+03:00</updated><id>https://thehermeticvault.com/software-development/resource-management-with-explicit-template-specialisations</id><author><name>Pavel Frolov</name></author><category term="software-development" /><category term="C++" /><category term="Generic Programming" /><category term="Windows API" /><summary type="html">Here’s my article from the April 2015 issue of Overload journal. It shows how to build a convinient RAII wrapper with the help of interesting static polymorphism technique based on explicit template specialisation.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://thehermeticvault.com/img/pages/overload-126.png" /></entry><entry><title type="html">Providing Explicit Specialisations for Non‐Template Members of Class Template</title><link href="https://thehermeticvault.com/software-development/providing-explicit-specialisations-for-non-template-members-of-class-template" rel="alternate" type="text/html" title="Providing Explicit Specialisations for Non‐Template Members of Class Template" /><published>2015-01-17T00:00:00+03:00</published><updated>2015-01-17T00:00:00+03:00</updated><id>https://thehermeticvault.com/software-development/providing-explicit-specialisations-for-non-template-members-of-class-template</id><author><name>Pavel Frolov</name></author><category term="software-development" /><category term="C++" /><category term="Generic Programming" /><summary type="html">It is a well-known fact that you can provide explicit specialisations for function templates and class templates. But it was a total surprise to me that you can define explicit specialisations for non‐template members of class template without specialising the class template itself!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://thehermeticvault.com/img/pages/goethe-schiller-monument.jpg" /></entry><entry><title type="html">Using Coverity Scan with AppVeyor</title><link href="https://thehermeticvault.com/software-development/using-coverity-scan-with-appveyor" rel="alternate" type="text/html" title="Using Coverity Scan with AppVeyor" /><published>2015-01-07T00:00:00+03:00</published><updated>2015-01-07T00:00:00+03:00</updated><id>https://thehermeticvault.com/software-development/using-coverity-scan-with-appveyor</id><author><name>Pavel Frolov</name></author><category term="software-development" /><category term="CI" /><category term=".NET" /><category term="PowerShell" /><category term="Static Analysis" /><summary type="html">Unlike Travis CI, AppVeyor currently lacks out of the box integration with Coverity Scan. In this article I’ll show you how to enable Coverity Scan code analysis for your project by injecting custom PowerShell scripts into AppVeyor build process.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://thehermeticvault.com/img/pages/codex-hammurabi.jpg" /></entry></feed>
